// NLPOpenSearchService.java

@Service
public class NLPOpenSearchService {

    @Autowired
    private NLPService nlpService;

    @Autowired
    private GenericIndexService genericIndexService;

    public List<Map<String, Object>> search(String indexName, String query) throws IOException {
        // Tokenize the query
        String[] tokens = nlpService.tokenizeQuery(query);

        // Perform POS tagging
        String[] posTags = nlpService.posTagQuery(tokens);

        // Perform named entity recognition
        Span[] nameSpans = nlpService.nameFindQuery(tokens);

        // Extract intent and entity
        String intent = nlpService.extractIntent(query, tokens);
        String entity = nlpService.extractEntity(query, nameSpans);

        // Construct a search query
        String esQuery = constructESQuery(intent, entity, query, tokens, posTags, nameSpans);

        // Execute the search
        return genericIndexService.search(indexName, esQuery);
    }

    private String constructESQuery(String intent, String entity, String query, String[] tokens, String[] posTags, Span[] nameSpans) {
        StringBuilder esQuery = new StringBuilder("{\"query\":{\"bool\":{\"must\":[");
        if (intent.equals("RETRIEVE")) {
            for (String token : tokens) {
                if (posTags[tokens.indexOf(token)].startsWith("CD")) { // CD: Cardinal number
                    esQuery.append("{\"range\":{\"").append(extractFieldName(query, tokens, token)).append("\":{\"gt\":").append(token).append("}}}");
                } else if (posTags[tokens.indexOf(token)].startsWith("NN")) { // NN: Noun
                    esQuery.append("{\"term\":{\"").append(extractFieldName(query, tokens, token)).append("\":\"").append(token).append("\"}}");
                }
            }
        }
        esQuery.append("]}}}");
        return esQuery.toString();
    }

    private String extractFieldName(String query, String[] tokens, String token) {
        // Simple implementation to extract field name
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals(token) && i > 0) {
                return tokens[i - 1].toLowerCase();
            }
        }
        return null;
    }
}